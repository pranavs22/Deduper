# -*- coding: utf-8 -*-
"""
Created on Tue Nov 12 17:10:22 2019

@author: Pranav
"""

'''
The Problem:
During rna-seq library preparation, there is a step involved after
adapters are ligated to both fragments. That step involves fragment 
amplification using PCR. PCR duplicates arise during this step of 
library preparation. PCR duplicates are two or more copies of original molecule that are sequenced
on different locations in a flowcell.

The reason why these are problematic ---
1. Consider a situation where we know, what genes would be expressed in the control 
and treated samples.
However during bioinformatic analysis, we find that a gene is over-expressed even when we
know that it should not be. This might lead to false assumptions about treatment and 
lead to mis-interpretation of results.

2. Consider another case where a gene is having high GC content, and it is known that it 
will be over-expressed,still we get lower expression in the data after sequencing.
This might be due to the fact PCR amplifies GC-rich genes less compared to AT rich genes.

This will also lead to mis-interpretation of results.

To avoid above problems,it is necessary to remove PCR duplicates after alignment.
'''


#Develop your algorithm using pseudocode
#All Imports
#import regex
# Global declarations
#global dictionary  # dictionary to store qname as header and concatenated string as a value
# global set   # a set to add unique records

# dictionary declaration
# set declaration 

def parse_rec(info):
    '''This function takes in a read and calculates true position based on the CIGAR string. 
    Also it returns a concatenated string which is a combination of UMI,strand,chromosome number,
    chromosome position.'''
    
    '''Split the record, get UMI,strand,chromosome number,chromosome position and store
    it in the variables. Derive true position of the aligned read based on CIGAR string.
    using join return a concatenated string containing UMI,strand,chromosome number,chromosome position.'''
    
    ''' Test Example ---
     When given a record-
         the function, after processing, will return a string in this format--"UMI_Chr_Pos_Strand"

    The output from parse sam function will be input to this function.
    It will process the record and return output similar to-- 
    containing UMI,chr_no,pos,strand--
    'CAACGATC_2_4626657_0'

         '''
      
    return # string 
def parse_sam(sam):
    '''This function takes in a SAM file and reads the records by chromosome. It then passes
    these reads as input to parse_rec function''' 

    ''' Test Example ---
    
    The input will be a file containing records that are sorted by chromosome---
    
    NS500451:154:HWKTMBGXX:1:22103:21539:19173:GTGATGTC     0       2       3286131 36      71M     *       0       0       CCAGTTAAGAGGTTTCCAGATTTATTACACATCAGCACATTAATTATATATTAGGATGCTTAATCAAAATT        EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEMD:Z:71 NH:i:1  HI:i:1  NM:i:0  SM:i:36 XQ:i:40 X2:i:0  XO:Z:UU
    NS500451:154:HWKTMBGXX:1:22103:66244:99484:GTGATGTC     1024    2       3286131 36      71M     *       0       0       CCAGTTAAGAGGTTTCCAGATTTATTACACATCAGCACATTAATTATATATTAGGATGCTTAATCAAAATT        EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEMD:Z:71 NH:i:1  HI:i:1  NM:i:0  SM:i:36 XQ:i:40 X2:i:0  XO:Z:UU
    .
    .
    
    .
    .
    .
    NS500451:154:HWKTMBGXX:1:22103:21539:19173:GTGATGTC     0       2       3286131 36      71M     *       0       0       CCAGTTAAGAGGTTTCCAGATTTATTACACATCAGCACATTAATTATATATTAGGATGCTTAATCAAAATT        EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEMD:Z:71 NH:i:1  HI:i:1  NM:i:0  SM:i:36 XQ:i:40 X2:i:0  XO:Z:UU
    and so on
    
    It will process these records and return an output of the form-----

    ['EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE',
     'MD:Z:71', 'NH:i:1', 'HI:i:1', 'NM:i:0', 'SM:i:36', 'XQ:i:40', 'X2:i:0', 'XO:Z:UU']
    
    The output from parse_rec will be stored in a set. This will ensure that only unique
    reads are kept.
    At the same time another set will be appended containg 'QNAME'.'''
    return 

def write_sam(set):
    ''' This function will take in a set of QNAMEs and write that to a new SAM file.'''
    
    ''' Open Original SAM file, newSAM file,
            Iterate over set and check if the QNAME is rcords present in files-
                If yes,write it out to a new file:
                else,continue'''

    ''' Test Example ---
    if the input set contains QNAMEs such as-
    NS500451:154:HWKTMBGXX:1:22103:21539:19173:GTGATGTC,
    NS500451:154:HWKTMBGXX:1:22103:66244:99484:GTGATGTC
    
    It will be compared to existing records and written to a new file'''
    return



    
#Call the function
#parse_sam(sam)



